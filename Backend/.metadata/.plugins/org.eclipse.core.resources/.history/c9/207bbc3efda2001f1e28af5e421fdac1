package com.example.coffeeshop.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.coffeeshop.model.CartItem;
import com.example.coffeeshop.model.CartItemRepository;
import com.example.coffeeshop.model.MenuItem;
import com.example.coffeeshop.model.MenuItemRepository;

@RestController
@RequestMapping("/api/admin")
public class AdminController {
    
    @Autowired
    private MenuItemService menuItemService;
    
    @Autowired
    private OrderRepository orderRepository;
    
    // Menu Item Management
    @PostMapping("/menu-items")
    public ResponseEntity<?> addMenuItem(@RequestBody MenuItem menuItem) {
        try {
            MenuItem savedItem = menuItemService.addMenuItem(menuItem);
            return ResponseEntity.ok(savedItem);
        } catch (IllegalArgumentException e) {
            return ResponseEntity
                .badRequest()
                .body(new ErrorResponse("Invalid menu item", e.getMessage()));
        }
    }
    
    @PutMapping("/menu-items/{id}")
    public ResponseEntity<?> updateMenuItem(
            @PathVariable Long id,
            @RequestBody MenuItem menuItem) {
        try {
            MenuItem updatedItem = menuItemService.updateMenuItem(id, menuItem);
            return ResponseEntity.ok(updatedItem);
        } catch (IllegalArgumentException e) {
            return ResponseEntity
                .badRequest()
                .body(new ErrorResponse("Invalid menu item", e.getMessage()));
        }
    }
    
    @DeleteMapping("/menu-items/{id}")
    public ResponseEntity<?> deleteMenuItem(@PathVariable Long id) {
        try {
            menuItemService.deleteMenuItem(id);
            return ResponseEntity.ok().build();
        } catch (RuntimeException e) {
            return ResponseEntity
                .notFound()
                .build();
        }
    }
    
    // Order Management
    @GetMapping("/orders")
    public ResponseEntity<Map<String, Object>> getAllOrders(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        
        Page<Order> orderPage = orderRepository.findAll(PageRequest.of(page, size));
        
        Map<String, Object> response = new HashMap<>();
        response.put("orders", orderPage.getContent());
        response.put("currentPage", orderPage.getNumber());
        response.put("totalItems", orderPage.getTotalElements());
        response.put("totalPages", orderPage.getTotalPages());
        
        return ResponseEntity.ok(response);
    }
    
    @GetMapping("/orders/status/{status}")
    public ResponseEntity<List<Order>> getOrdersByStatus(
            @PathVariable OrderStatus status) {
        List<Order> orders = orderRepository.findByStatus(status);
        return ResponseEntity.ok(orders);
    }
    
    @GetMapping("/orders/statistics")
    public ResponseEntity<Map<String, Object>> getOrderStatistics() {
        Map<String, Object> stats = new HashMap<>();
        
        // Count orders by status
        Map<OrderStatus, Long> ordersByStatus = Arrays.stream(OrderStatus.values())
            .collect(Collectors.toMap(
                status -> status,
                status -> orderRepository.countByStatus(status)
            ));
        
        // Calculate total revenue
        double totalRevenue = orderRepository.findByStatus(OrderStatus.COMPLETED)
            .stream()
            .mapToDouble(Order::getTotalAmount)
            .sum();
        
        stats.put("ordersByStatus", ordersByStatus);
        stats.put("totalRevenue", totalRevenue);
        stats.put("totalOrders", orderRepository.count());
        
        return ResponseEntity.ok(stats);
    }
}

// Add methods to OrderRepository
public interface OrderRepository extends JpaRepository<Order, Long> {
    List<Order> findByStatus(OrderStatus status);
    long countByStatus(OrderStatus status);
}

// Update MenuItemService
@Service
public class MenuItemService {
    // ... existing code ...
    
    public void deleteMenuItem(Long id) {
        // Check if item exists
        MenuItem item = menuItemRepository.findById(id)
            .orElseThrow(() -> new RuntimeException("Menu item not found"));
            
        // Check if item is used in any orders
        // You might want to implement this check if needed
        
        menuItemRepository.deleteById(id);
    }
}
